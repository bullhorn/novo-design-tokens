var Listr, chalk, exec, fs, glob, path, regEx;

fs = require('fs');

path = require('path');

glob = require('glob');

chalk = require('chalk');

Listr = require('@danielkalen/listr');

exec = require('child_process').exec;

regEx = require('./regex');

module.exports = function(options) {
  return new Promise(function(finish) {
    var executeCommand, finalLogs, formatOutputMessage, getDirName, globOptions, isValidOutput, outputFinalLogs;
    finalLogs = {
      'log': {},
      'error': {}
    };
    globOptions = {};
    if (options.ignore) {
      globOptions.ignore = options.ignore;
    }
    if (options.nodir) {
      globOptions.nodir = options.nodir;
    }
    glob(options.glob, globOptions, function(err, files) {
      var tasks;
      if (err) {
        return console.error(err);
      } else {
        tasks = new Listr(files.map((function(_this) {
          return function(file) {
            return {
              title: "Executing command: " + (chalk.dim(file)),
              task: function() {
                return executeCommand(file);
              }
            };
          };
        })(this)), options);
        return tasks.run().then(outputFinalLogs, outputFinalLogs);
      }
    });
    executeCommand = function(filePath) {
      return new Promise(function(resolve, reject) {
        var command, pathParams;
        pathParams = path.parse(path.resolve(filePath));
        pathParams.reldir = getDirName(pathParams, path.resolve(filePath));
        command = options.command.replace(regEx.placeholder, function(entire, placeholder) {
          switch (false) {
            case placeholder !== 'path':
              return filePath;
            case pathParams[placeholder] == null:
              return pathParams[placeholder];
            default:
              return entire;
          }
        });
        if (options.forceColor && process.platform !== 'win32') {
          command = "FORCE_COLOR=true " + command;
        }
        return exec(command, function(err, stdout, stderr) {
          if (isValidOutput(stdout)) {
            finalLogs.log[filePath] = stdout;
          }
          if (isValidOutput(stderr) && !isValidOutput(err)) {
            finalLogs.log[filePath] = stderr;
          } else if (isValidOutput(err)) {
            finalLogs.error[filePath] = stderr || err;
          }
          if (isValidOutput(err)) {
            return reject();
          } else {
            return resolve();
          }
        });
      });
    };
    getDirName = function(pathParams, filePath) {
      var dirInGlob;
      dirInGlob = options.glob.match(/^[^\*\/]*/)[0];
      dirInGlob += dirInGlob ? '/' : '';
      return filePath.replace(pathParams.base, '').replace(process.cwd() + ("/" + dirInGlob), '').slice(0, -1);
    };
    isValidOutput = function(output) {
      return output && output !== 'null' && ((typeof output === 'string' && output.length >= 1) || (typeof output === 'object'));
    };
    formatOutputMessage = function(message) {
      if (options.trim) {
        return message.slice(0, options.trim);
      } else {
        return message;
      }
    };
    return outputFinalLogs = function() {
      var file, message, ref, ref1;
      if (Object.keys(finalLogs.log).length || Object.keys(finalLogs.error).length) {
        process.stdout.write('\n\n');
        ref = finalLogs.log;
        for (file in ref) {
          message = ref[file];
          console.log(chalk.bgWhite.black.bold("Output") + ' ' + chalk.dim(file));
          console.log(formatOutputMessage(message));
        }
        ref1 = finalLogs.error;
        for (file in ref1) {
          message = ref1[file];
          console.log(chalk.bgRed.white.bold("Error") + ' ' + chalk.dim(file));
          console.log(formatOutputMessage(message));
        }
        return finish();
      }
    };
  });
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/brian.kimball/Github/design-tokens/node_modules/foreach-cli/lib/foreach.coffee