@import "./variables.scss";
@import "./functions.scss";

// Entity Color Map
$entityColors: (
  "star": $color-placement,
  "person": $color-contact,
  "company": $color-company,
  "candidate": $color-candidate,
  "navigation": $color-navigation,
  "lead": $color-lead,
  "contact": $color-contact,
  "clientcontact": $color-contact,
  "opportunity": $color-opportunity,
  "job": $color-job,
  "joborder": $color-job,
  "submission": $color-submission,
  "sendout": $color-sendout,
  "placement": $color-placement,
  "note": $color-note,
  "task": $color-neutral,
  "distributionList": $color-neutral,
  "credential": $color-neutral,
  "user": $color-neutral,
  "corporateuser": $color-neutral,
  "contract": $color-contract,
  "jobCode": $color-job-code,
  "earnCode": $color-earn-code,
  "billableCharge": $color-billable-charge,
  "payableCharge": $color-payable-charge,
  "invoiceStatement": $color-invoice-statement,
);

/*******************/
/********SPACE******/
/*******************/
@function getSize($size) {
  $spaceTokens: map-get($tokens, "spacing");
  @return map-get($spaceTokens, $size);
}

/**padding**/
@mixin padding($size) {
  padding: getSize($size);
}
@mixin padding-top($size) {
  padding-top: getSize($size);
}
@mixin padding-bottom($size) {
  padding-bottom: getSize($size);
}
@mixin padding-left($size) {
  padding-left: getSize($size);
}
@mixin padding-right($size) {
  padding-right: getSize($size);
}
@mixin padding-horizontal($size) {
  padding-left: getSize($size);
  padding-right: getSize($size);
}
@mixin padding-vertical($size) {
  padding-top: getSize($size);
  padding-bottom: getSize($size);
}
/**margin**/
@mixin margin($size) {
  margin: getSize($size);
}
@mixin margin-top($size) {
  margin-top: getSize($size);
}
@mixin margin-bottom($size) {
  margin-bottom: getSize($size);
}
@mixin margin-left($size) {
  margin-left: getSize($size);
}
@mixin margin-right($size) {
  margin-right: getSize($size);
}
@mixin margin-horizontal($size) {
  margin-left: getSize($size);
  margin-right: getSize($size);
}
@mixin margin-vertical($size) {
  margin-top: getSize($size);
  margin-bottom: getSize($size);
}

/*******************/
/********COLOR******/
/*******************/
@function getColor($color) {
  $colorTokens: map-get($tokens, "color");
  @return map-get($colorTokens, $color);
}
@function getTintColor($color) {
  $colorTokens: map-get($tokens, "color");
  $tintTokens: map-get($colorTokens, "tint");
  @return map-get($tintTokens, $color);
}
@function getShadeColor($color) {
  $colorTokens: map-get($tokens, "color");
  $shadeTokens: map-get($colorTokens, "shade");
  @return map-get($shadeTokens, $color);
}
@function getContrastColor($color) {
  $colorTokens: map-get($tokens, "color");
  $contrastTokens: map-get($colorTokens, "contrast");
  @return map-get($contrastTokens, $color);
}
@function getPaleColor($color) {
  $colorTokens: map-get($tokens, "color");
  $paleTokens: map-get($colorTokens, "pale");
  @return map-get($paleTokens, $color);
}

/**color**/
@mixin color($color) {
  color: getColor($color);
}

/**background-color**/
@mixin background-color($color) {
  background-color: getColor($color);
}

/*******************/
/*****Typography****/
/*******************/
$textSizeTokens: map-get($tokens, "textSize");
$textWeightTokens: map-get($tokens, "textWeight");

@mixin font($size, $type: "body") {
  @if ($type == "body") {
    font-size: map-get($textSizeTokens, $size);
    font-weight: map-get($textWeightTokens, "light");
  }
  @if ($type == "heading") {
    font-size: map-get($textSizeTokens, $size);
    font-weight: map-get($textWeightTokens, "bold");
  }
}

/** THEMES **/
@mixin entity-colors() {
  @each $name, $color in $entityColors {
    @if (type-of($color) != "map") {
      $contrast: getContrastColor($name);
      $tint: getContrastColor($name);
      $shade: getContrastColor($name);
      $pale: getPaleColor($name);

      @content ($name, $color, $contrast, $tint, $shade, $pale);
    }
  }
}

@mixin theme-colors() {
  $colorTokens: map-get($tokens, "color");
  @each $name, $color in $colorTokens {
    @if (type-of($color) != "map") {
      $contrast: getContrastColor($name);
      $tint: getContrastColor($name);
      $shade: getContrastColor($name);
      $pale: getPaleColor($name);
      @content ($name, $color, $contrast, $tint, $shade, $pale);
    }
  }
}

@mixin theme-backgrounds($prefix: "color", $interactive: false) {
  @include theme-colors() using ($name, $color, $contrast, $tint, $shade, $pale) {
    &[#{$prefix}="#{$name}"] {
      color: $contrast;
      background: $color;
      @if ($interactive) {
        &:hover,
        &:focus {
          background: $tint;
        }
        &:active {
          background: $shade;
        }
      }
      @content ($name, $color, $contrast, $tint, $shade, $pale);
    }
  }
}

@mixin theme-text-colors($prefix: "color") {
  @include theme-colors() using ($name, $color, $contrast, $tint, $shade, $pale) {
    &[#{$prefix}="#{$name}"] {
      color: $color;
      i {
        color: $color;
      }
      @content ($name, $color, $contrast, $tint, $shade, $pale);
    }
  }
}

@mixin theme-borders($prefix: "color") {
  @include theme-colors() using ($name, $color, $contrast, $tint, $shade, $pale) {
    &[#{$prefix}="#{$name}"] {
      border: 1px solid $color;
      @content ($name, $color, $contrast, $tint, $shade, $pale);
    }
  }
}
